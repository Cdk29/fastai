% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vision_models.R
\name{ResNet}
\alias{ResNet}
\title{ResNet}
\usage{
ResNet(
  block,
  layers,
  num_classes = 1000,
  zero_init_residual = FALSE,
  groups = 1,
  width_per_group = 64,
  replace_stride_with_dilation = NULL,
  norm_layer = NULL
)
}
\arguments{
\item{block}{block}

\item{layers}{layers}

\item{num_classes}{num_classes}

\item{zero_init_residual}{zero_init_residual}

\item{groups}{groups}

\item{width_per_group}{width_per_group}

\item{replace_stride_with_dilation}{replace_stride_with_dilation}

\item{norm_layer}{norm_layer}
}
\description{
Base class for all neural network modules.
}
\details{
Your models should also subclass this class. Modules can also contain other Modules, allowing to nest them in
a tree structure. You can assign the submodules as regular attributes:: import torch.nn as nn import torch.nn.functional as F class Model(nn.Module): def __init__(self): super(Model, self).__init__() self.conv1 = nn.Conv2d(1, 20, 5) self.conv2 = nn.Conv2d(20, 20, 5) def forward(self, x): x = F.relu(self.conv1(x)) return F.relu(self.conv2(x)) Submodules assigned in this way will be registered, and will have their
parameters converted too when you call :meth:`to`, etc.
}
